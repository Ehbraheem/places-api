exit
parsed_body
last_response
payload
exit
exception.backtrace_locations
exception.backtrace_location
exception.args
exception.
exception.methods
exception.message
exception
n
exception
n
last_response
exit
record.send(:name)
send(record , attribute)
record.name
attribute
record
send(record , attribute)
c
JSON.parse payload
payload.each {|p| puts p}
payload[0]
payload
c
 jget locations_path
c
record
c
FactoryGirl.create(:location)
record
c
last_response
FactoryGirl.create :location
c
last_response
locations_path
exit
"asbgh/b/".gsub /\/\z/, ""
"asbgh/b".gsub /\/\z/, ""
"asbghb".gsub /\/\z/, ""
"asbghb/".gsub /\/\z/, ""
base_path[0..-1]
base_path[0..4]
base_path[..4]
base_path[..-1]
"asbghb/".match /\/\z/
"asbghb/" =~ /\/\z/
"asbghb" =~ /\/\z/
base_path
last_response
c
last_response
exit
jget "/api/v1/locations"
jget "/api/v1/locations
locations_path
locations_path[:9]
jget locations_path[:-9]
locations_path
jget locations_path
c
RouteHelpers.locations_path
RouteHelpers.locations_peth
locations_pth
meth
c
last_response.headers
last_response.length
last_response
last_response.headers
last_response.headers["Content-Type"]
last_response.body.length
last_response.body.methods
last_response.body.kind_of? JSON
last_response.body.kind_of?
last_response.body.kind
last_response.body.is_a? JSON
JSON.parse last_response.body
require 'json
require 'json'
last_response.body.is_a? JSON
last_response.body.is_a? Hash
last_response.body
last_response.body.is_a? Array
last_response.body.is_a? JSON
last_response.headers["Content-Type"]
last_response.headers.is_a? Hash
"".empty?
last_response.headers
last_response.errors
last_response
exit
c
n
var all
last_response.body
payload
c
payload["response"]["results"]
payload["response"]
payload.keys
payload.class
c
expect(payload).to be_a_kind_of JSON
payload
c
n
c
n
exit
c
Digest::SHA256.hexdigest 'abc'
Digest::SHA2.hexdigest 'abc'
Digest::Sha2
sha256
sha
parsed_body["results"]
parsed_body.results
parsed_body
c
exit
c
base_path
exit
base_path
var all
exit
c
request
last_response.location
last_response.methods.grep /location/
last_response.methods.grep /path/
last_response.methods
last_response.base_path
last_response.body
last_response
exit
c
exit
c
self
methods.grep /path/
c
methods.grep /path/
exit
include
methods.grep /include/
methods.grep /path/
app.methods.grep /path/
exit
include
included
app.methods.grep /path/
app.methods
methods.grep /path/
exit
base_path
methods.grep /path/
methods
locations_path
exit
c
location_path("lagos")
c
locations_path
last_response.status_message
last_response.status
c
RouteHelpers.send(meth, args)
exit
RouteHelpers.send(meth, args)
var all
c
exit
args
c
match[2]
exit
match[2]
match[1]
meth
match
base_path
RouteHelpers.respond_to? meth
self.respond_to? meth
c
meth
locations_path
c
PlacesApi.singleton_methods.grep /path/
PlacesApi.singleton_methods
PlacesApi.public_class_method
PlacesApi.public_class_methods
PlacesApi.class_methods
PlacesApi.methods.grep /method/
PlacesApi.methods.grep /path/
PlacesApi.methods
locations_path
methods.grep /path/
base_path
meth
base_path
self.methods.grep /path/
self.methods
meth
c
methods.grep /path/
methods
var all
self.ancestors
ancestors
self
RouteHelper.respond_to? meth
self
exit
base_path
ancestors
exit
add_path
base_path
self.base_path
c
ancestors
methods.grep /anc/
ancesstors
c
exit
instance_methods.grep /path/
instance_methods
included_modules
methods.grep /inclu/
methods.grep /path/
included?
included
methods
c
methods.grep /path/
methods
exit
categories_path
methods.grep /path/
methods
exit
categories_path
location_path
methods.grep /path/
methods
c
path
c
make_path path, send("#{root}_path", "name")
