c
exit
!!([])
data.methods
var all
n
var all
n
exit
var all
n
c
exit
n
var all
c
n
var all
n
c
var all
c
var all
exit
var all
n
var all
n
var all
n
find_by :title => title.gsub(/\s/, "+").downcase.singularize
title.gsub(/\s/, "+").downcase.singularize
title
c
var all
n
val
var all
e
n
e
n
e
n
e
exit
%W( #{args.collection.to_sym} )
%W( args.collection.to_sym )
%W(args.collection.to_sym)
args.collection
args.strategy
args
var all
c
Rake::Task.tasks
system 'cls'
Rake::Task.tasks
Rake::Task.methods
Rake::Task.all
Rake::Task
var all
c
var all
args
c
exit
val.each { |e| Rake::Task[clean_db:start_cleaning].invoke(name, "truncation", e) }
val.each { |e| Rake::Task[:setup_db].execute }
val.each { |e| Rake::Task[:start_cleaning].execute }
val.each { |e| Rake::Task[:start_cleaning].invoke(name, "truncation", e) }
var all
c
var all
c
n
obj
c
var all
obj
c
var all
c
var all
c
var all
exit
title.gsub!(/\s/, "")
title.gsub!(/\s/, "").downcase
title.gsub(/\s/, "").downcase
title.gsub(/\s/, "")
title.gsub /\s/, ""
title.gsub
title
exit
var all
c
meth
c
meth
mehth
c
self.methods.grep /callback/
self.callback
self
c
self.geometry
var all
hash
c
n
e
self.geometry[key]
var all
self.geometry[key][e].values
c
var all
n
var all
n
hash
has
e
c
self.geometry[key]
self.geometry[key].keys
var all
self.geometry[key].keys.each { |e|  hash[key][e] = Point.new self.geometry[key][e].values }
c
self.geometry[key].keys
key
c
self.geometry
key
self.geometry[key].keys
c
exit
Category.delete_all
Place.delete_all
Location.delete_all
Landmark.delete_all
Location.delete_all
c
exit
Location.delete_all
Category.delete_all
Landmark.delete_all
Category.delete_all
Place.delete_all
c
self.geometry
c
Place.delete_all
Place.count
exit
self.geometry.keys.inject({}) do |hash, key| hash[key]=Point.new(self.geometry[key].values); hash end
self.geometry.keys {|k| self.geometry[key]=Point.new(self.ge
self.geometry
self.geometry.keys {|k| self.geometry[key]= Point.new(self.geometry[key].values)}
self.geometry.keys {|k| Point.new(self.geometry[key].values)}
self.geometry
self
c
data[1]["name"]
data[1]["rating"]
var all
doc
var all
c
var all
c
var all
n
var all
c
Category.all
Location.all
c
var all
n
var all
n
var all
c
n
var all
n
var all
n
var all
exit
n
doc
n
var all
exit
Place.delete_all
Places.delete_all
Location.count
Category.count
Category.delete_all
Location.delete_all
Landmark.delete_all
Landmark.all
location
Location.where(:name=>location)
Location.all
@location = Location.with_name(location)
var all
n
var all
n
Place.all.count
Place.all
var all
c
n
c
n
var all
n
var all
n
query
exit
var all
exit
Place.all.each {|pl| pp pl.category_id}
Place.all.each {|pl| pp pl.category_id == 202}
Place.all.each {|pl| pp pl.categor_id}
Place.all.each {|pl| pp pl.category_id == 202}
require 'pp'
Place.all.count
Place.all
Place.where(:category_id=>@category.id).first
Place.where(:category_id=>@category.id)
Place.for_category(@category.id, @location.id).first
Place.for_category(@category.id, @location.id).all
Place.for_category(@category.id, @location.id)
c
exit
c
@category.id
@category.od
" ".empty?
"".empty?
c
nil.empty
var all
exit
Category.with_title('canteen').first.id
Category.with_title('canteen').first
Category.with_title('canteen').id
Category.with_title('Saloon').id
c
Category.with_title('Saloon').empty?
Category.with_title('Saloon').first
