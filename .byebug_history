exit
method_name
c
blk
args
method_name
c
exit
FactoryGirl.build(:category)[:title]
c
exit
obj[:name]
obj.to_h
Place.demongoize(obj).has_key? :name
Place.new
Place.evolve(obj)
obj
Place.demongoize(obj)
object.demongoize
Place.demongoize(obj)
object.demongoize
c
obj.methods.grep /attr/
obj.methods.grep /fiel/
obj.fields?
obj.fields? :name
obj.field? :name
obj.methods.grep /field/
obj.has_field? :name
obj.has_key? :name
obj
arr
c
object
var all
c
association
exit
method_name
args
exit
self
args
method_name
c
n
method_name
c
method_name
c
args
exit
FactoryGirl.build_list(:place, 4)
FactoryGirl.build_list(association.singularize.to_sym, 4)
association
c
n
association
c
association
exit
obj
send_message(obj, "#{association}=", FactoryGirl.build_list(associatio‡Pym, 4)
c
n
association
associate
exit
obj.places.count
obj.places
obj.places= FactoryGirl.build_list(association.singularize.to_sym, 4)
obj
assos
send_message(obj, "#{association}=", FactoryGirl.build_list(association.singularize.to_sym, 4))
obj
assos_obj
exit
assos_obj
c
exit
self
associate
associate.save
n
association
method_name
c
self
c
n
method_name
exit
cat.places.count
cat.places= FactoryGirl.build(:place)
cat.places.count
cat.places
cat.places= FactoryGirl.build(:place)
cat.places.to_a
cat = FactoryGirl.create(:category,:with_place)
cat
cat = FactoryGirl.create(object, create_association_param(association))
obj.places.count
exit
cat = FactoryGirl.create(object, create_association_param(association))
obj.places.count
obj
c
Place.where(category_id: 2).count
Place.where(category_id: 3).count
cat.places.count
cat.places=(FactoryGirl.build_list(:place, 4))
FactoryGirl.build_list(:place, 4)
cat = FactoryGirl.create(object, create_association_param(association))
n
exit
FactoryGirl.build_list(:place, 4)
(FactoryGirl.build_list(:place, 4)
cat.places=(FactoryGirl.build_list(:place, 4))
cat = FactoryGirl.create(object, create_association_param(association))
obj
exit
cls
exit
Place.all
Place.where(category_id: 3).count
cat.places.count
cat.places=(FactoryGirl.build_list(:place, 4))
cat.places=(FactoryGirl.build_list(:place))
cat.places=(FactoryGirl.build(:place))
cat = FactoryGirl.create(object, create_association_param(association))
FactoryGirl.create(object, create_association_param(association))
c
obj
exit
Place.where(category_id: 3).count
Place.where(category_id: 3).first
Place.where(category_id: 3).all
Place.where(category_id: 3)
Place.find(category_id: 3)
cat.id
cat.places.count
cat.places= FactoryGirl.build_list(:place, 3)
cat.places.count
cat.places = FactoryGirl.build_list(:place, 3)
cat.places << FactoryGirl.build_list(:place, 3)
cat.places.count
cat.places << FactoryGirl.build_list(:place, 3)
cat = FactoryGirl.create(object, create_association_param(association))
FactoryGirl.create(object, create_association_param(association))
obj
exit
cls
obj.places.count << FactoryGirl.build_list(:place, 4)
obj.places.count << FactoryGirl.build_list :place, 4
obj.places.count
FactoryGirl.create(object, create_association_param(association))
obj
exit
args
method_name
FactoryGirl.create(object, create_association_param(association))
exit
cat.places.count
cat.places.all
cat.places
var all
cat
FactoryGirl.create(object, create_association_param(association))
cat
cat.messages
cat
cat = FactoryGirl.create(object, create_association_param(association))
cat = FactoryGirl.create(object, create_association_param(association)
create_association_param(association)
obj.places.count
obj.save
obj.id
c
args
c
args
c
args
c
args
c
args
c
n
var all
n
var all
n
var all
exit
exception
n
exception
n
obj.places.count
obj
subject
exit
subject { send_message(obj, association.pluralize, FactoryGirl.create(association.to_sym)) }
subject { send_message(obj, association.pluralize) }
obj.places.count
obj.places
obj
subject
exit
obj
subject.places
subject
c
n
c
n
association
associate
n
instance
var all
n
object
self
self.category_id
c
Place.all.count
Place.all
c
obj.places.count
obj.save
obj.places.count
obj
c
category_id
location_id
self.save
Place.all.count
Place.all
self.attributes
var all
object
self
obj
exit
object.id
c
object
var all
c
subject.count
subject.all
subject
c
self.save
