c
subj.category
subj.location
obj
subj
obj.id
id
exit
expect(FactoryGirl.build(:place).attributesh).to raise_error
expect(FactoryGirl.build(:place).attributesh).to raise_exception
expect(FactoryGirl.build(:place).attributesh).to raise_error(NoMethodError)
expect(FactoryGirl.build(:place).attributesh).to raise_error { NoMethodError }
FactoryGirl.build(:place).attributesh
FactoryGirl.build(:place).attributes.keys
FactoryGirl.build(:place).attributes
var all
self
c
exit
subject.build(FactoryGirl.build(:landmark).attributes).save
subject.build(FactoryGirl.build(:landmark).attributes)
subject.build(FactoryGirl.build(:landmark).attributes
FactoryGirl.build(:landmark).attributes
FactoryGirl.build(:landmark)
FactoryGirl.create(connecting_obj)
{ "#{connecting_obj.to_s}_id".to_sym => FactoryGirl.create(connecting_obj).id }
associated_obj
exit
!!(nil)
!!(:n)
associated_obj
exit
associated_obj
subject.build(associated_obj).save
subject
FactoryGirl.attributes_for(association.to_sym, connecting_obj=> FactoryGirl.create(connecting_obj))
c
exit
FactoryGirl.attributes_for(association.to_sym, :category_id=> FactoryGirl.create(connecting_obj).id)
FactoryGirl.attributes_for(association.to_sym, :category_id=> FactoryGirl.create(connecting_obj))
FactoryGirl.attributes_for(association.to_sym, connecting_obj=> FactoryGirl.create(connecting_obj))
associated_obj
connecting_obj
exitàH
FactoryGirl.attributes_for(association.to_sym, connecting_oexit)
FactoryGirl.attributes_for(association.to_sym, connecting_obj=> FactoryGirl.build(connecting_obj))
connecting_obj
conecting_obj
associated_obj
obj.landmarks
subject.build(associated_obj).save
subject.save
subject
c
exit
eval(obj.#{association.pluralize}.build(associated_obj))
eval("obj.#{association.pluralize}.build(#{associated_obj})")
as = 23
associated_obj
eval("obj.#{association.pluralize}").build(ass)
obj.landmarks.new
eval("obj.#{association.pluralize}.build(#{associated_obj})")
eval("obj.#{association.pluralize}.build(#{associated_obj})"))
eval("obj.#{association.pluralize}.build(#{associated_obj})")
eval("obj.#{association.pluralize}.build(#{assos})")
builder.call(associated_obj)
builder
builder = lambda {|assos| eval("obj.#{association.pluralize}.build(#{assos})") }
builder
exit
builder
exit
let(:builder) {|associated_obj| eval("obj.#{association.pluralize}.build(#{associated_obj})") }exit
let(:builder) {|associated_obj| eval("obj.#{association.pluralize}.build(#{associated_obj})") }
let(:builder) {|associated_obj| eval("obj.#{association.pluralize}.build(#{associated_obj})")
eval("obj.#{association.pluralize}").build(associated_obj)
eval("obj.#{association.pluralize}")
evàPal(obj.#{association.pluralize}")
data = subject.build(associated_obj)
subject
obj.landmarks(associated_obj)
eval(obj.#{association.pluralize})
eval(obj.#{association.pluralize}.build(associated_obj))
eval obj.#{association.pluralize}.build(associated_obj)
eval obj."#{association.pluralize}".build(associated_obj)
obj."#{association.pluralize}".build(associated_obj)
exit
obj.landmarks(associated_obj)
obj.landmarks
obj.landmarks(associated_obj)
obj.build(associated_obj)
associated_obj
data = subject.build(associated_obj)
exit
associated_obj.to_h
associated_obj
subject.new(associated_obj)
subject
data = subject.build(associated_obj)
c
associated_obj
c
associated_obj
c
exit
associated_obj
exit
obj.categories
obj
c
exit
Landmark.methods.grep /ind/
Landmark.methods.grep /in/
Landmark.methods.grep /index/
exit
BasicObject::BasicObject.methods
BasicObject::BasicObject
BasicObject.constants
BasicObject.methods
Class.class
Module.class
MOdule.class
ModelsHelper.class
ModelsHelper.ancestors
ModelsHelper.ancesstors
ModelsHelper.methods.anccestors
ModelsHelper.methods.ancestors
ModelsHelper.methods.ancesstors
ModelsHelper.methods.grep /^se/
ModelsHelper.methods.grep /^send/
self
/
sender.call(owning_obj, owned_object.pluralize)
exit
sender.call(owning_obj, owned_object.pluralize)
exit
sender.call(owning_obj, owned_object.pluralize)
owned_obj
c
self
c.call(self, places)
c.call
c = ->(a,b) { puts a,b }
b
b = lambda {|a, b| send_message(a,b)}
b = ->(a,b) { puts a,b }
b = ->(a,b) { puts a,b}
b = ->(a,b) { send_message(a, b) }
b = ->(a,b) { send_message a, b }
system 'cls'
owned_obj
exit
owned_obj
exit
sender.call(owning_obj, owned_object.pluralize)
send_message(owning_obj, owned_object.pluralize)
records
send_message(owning_obj, owned_object.pluralize)
sender.call(owning_obj, owned_object.pluralize)
sender.call
sender
owning_obj
sender.call(owning_obj, owned_object.pluralize)
owned_obj
owning_obj
records
exit
records
c
location.categories.length
n
expect(location.categories.length).to be > 1
expect(location.categories.count).to be > 1
location.categories.count
location.categories.all
records
record
location.categories
location
c
record.errors
record.save
record.errors
c
var all
n
var all
n
exit
var all
n
var all
n
var all
n
assos.is_a? Array
assos
exit
association
exit
obj.location
obj.locations
obj
subject
exit
self
method_name
methodname
association
exit
method_name
c
blk
args
method_name
c
exit
FactoryGirl.build(:category)[:title]
c
exit
obj[:name]
obj.to_h
Place.demongoize(obj).has_key? :name
Place.new
Place.evolve(obj)
obj
Place.demongoize(obj)
object.demongoize
Place.demongoize(obj)
object.demongoize
c
obj.methods.grep /attr/
obj.methods.grep /fiel/
obj.fields?
obj.fields? :name
obj.field? :name
obj.methods.grep /field/
obj.has_field? :name
obj.has_key? :name
obj
arr
c
object
var all
c
association
exit
method_name
args
exit
self
args
method_name
c
n
