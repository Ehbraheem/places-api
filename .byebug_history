exit
[:go, "boy", Object.new, []].inject({})  do |hash, v| puts "#{hash}=>#{v}" end
[:go, "boy", Object.new, []].inject({})  do |hash, v| puts "#{hash}=>#{v}" 
[:go, "boy", Object.new, []].inject({})  do |hash, v| puts "#{hash}=>#{v}" end
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash}=>#{v}" end
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash}=>#{v}" }
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash}=>#{v}" hash }
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash}=>#{v}"; hash }
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash}=>#{v}"; hashh }
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash}=>#{v}" }
[:go, "boy", Object.new, []].inject({}) {|hash, v| puts "#{hash} }
[:go, "boy", Object.new, []].inject({}) {|hash, v| hash[v.to_sym] = v }
[:go, "boy", Object.new, []].inject({}) {|hash, v| hash[v] = v }
[1..4]
fields.inject({}) do |hash, var|  hash[var] = var end
fields.inject({}) do |hash, var|   hash[var] = persistable[var] end
fields.inject({}) do |hash, var|   hash[var] = persistable[var]
fields.inject({}) do |hash, var|   hash[var] = persistable[var] hash end
fields.inject({}) do |hash, var|   hash[var] = persistable[var]; hash end
fields.inject({}) { |hash, var|   hash[var] = persistable[var]; hash}
c
persistable.save!
persistable.save
persistable.errors.messages
persistable.errors
persistable.persisted?
persistable
c
field
c
field
c
field.to_sym
field
c
field
exit
create_random_place
hash
newObject
newObject.update_attributes hash
newObject.update_attribute hash
hash
newObject.update_attribute(hash)
exit
cls
hash
newObject
newObject.update_attribute(hash)
exit
cls
persistable[field]
persistable.id
persistable.save
persistable.id
persistable.save
persistable.methods
persistable.split
persistable.save
persistable.split
persistable.id
persistable.methods.grep /fetch/
persistable.methods.grep /field/
persistable.methods.grep /key/
persistable.methods.grep /value/
persistable.methods.grep /field/
persistable.methods.grep /attributes/
persistable.methods.grep /split/
persistable.methods.grep /spl/
persistable.methods
persistable
c
another_place.errors.messages
require 'mongo'
another_place.errors.messages
another_place.errors
another_place
another_places
c
hash
hash.update_attributes(values)
values
hash
hash.methods.grep /set_att/
hash.methods.grep /attri/
hash.attributes
c
place_with_unique_error.errors.full_messages
place_with_unique_error.errors
place_with_unique_error
c
place.errors.full_messages
place.save
place.errors.full_messages
place.errors.full_message
place.errors.full_messages
place.errors.messages
place.errors
place
c
expect(place.errors).to respond_to :full_messages
expect(place.errors).to respond_to :messages
n
place.errors.respond_to? :messages
place.errors
place
c
Object.const_get(object.to_s.classify).new
Object.const_get(object.to_s.classify)
Object.const_get(object.tos.classify)
Object.const_get(object.classify)
object.class
object.to_s.classify.new
object.to_s.classify
object.to_s
object
c
cls
A.instance_methods
module A end
module A; def go; end end
module A; def go; end
module A; end
module A
module A; end
point.instance_methods
point.methods(true)
point.methods(false)
point.methods
point
c
point
n
c
last_response.errors
last_response.body
last_response.methods
last_response
c
n
self.configure
self
this
