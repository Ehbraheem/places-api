c
exit
Landmark.methods.grep /ind/
Landmark.methods.grep /in/
Landmark.methods.grep /index/
exit
BasicObject::BasicObject.methods
BasicObject::BasicObject
BasicObject.constants
BasicObject.methods
Class.class
Module.class
MOdule.class
ModelsHelper.class
ModelsHelper.ancestors
ModelsHelper.ancesstors
ModelsHelper.methods.anccestors
ModelsHelper.methods.ancestors
ModelsHelper.methods.ancesstors
ModelsHelper.methods.grep /^se/
ModelsHelper.methods.grep /^send/
self
/
sender.call(owning_obj, owned_object.pluralize)
exit
sender.call(owning_obj, owned_object.pluralize)
exit
sender.call(owning_obj, owned_object.pluralize)
owned_obj
c
self
c.call(self, places)
c.call
c = ->(a,b) { puts a,b }
b
b = lambda {|a, b| send_message(a,b)}
b = ->(a,b) { puts a,b }
b = ->(a,b) { puts a,b}
b = ->(a,b) { send_message(a, b) }
b = ->(a,b) { send_message a, b }
system 'cls'
owned_obj
exit
owned_obj
exit
sender.call(owning_obj, owned_object.pluralize)
send_message(owning_obj, owned_object.pluralize)
records
send_message(owning_obj, owned_object.pluralize)
sender.call(owning_obj, owned_object.pluralize)
sender.call
sender
owning_obj
sender.call(owning_obj, owned_object.pluralize)
owned_obj
owning_obj
records
exit
records
c
location.categories.length
n
expect(location.categories.length).to be > 1
expect(location.categories.count).to be > 1
location.categories.count
location.categories.all
records
record
location.categories
location
c
record.errors
record.save
record.errors
c
var all
n
var all
n
exit
var all
n
var all
n
var all
n
assos.is_a? Array
assos
exit
association
exit
obj.location
obj.locations
obj
subject
exit
self
method_name
methodname
association
exit
method_name
c
blk
args
method_name
c
exit
FactoryGirl.build(:category)[:title]
c
exit
obj[:name]
obj.to_h
Place.demongoize(obj).has_key? :name
Place.new
Place.evolve(obj)
obj
Place.demongoize(obj)
object.demongoize
Place.demongoize(obj)
object.demongoize
c
obj.methods.grep /attr/
obj.methods.grep /fiel/
obj.fields?
obj.fields? :name
obj.field? :name
obj.methods.grep /field/
obj.has_field? :name
obj.has_key? :name
obj
arr
c
object
var all
c
association
exit
method_name
args
exit
self
args
method_name
c
n
method_name
c
method_name
c
args
exit
FactoryGirl.build_list(:place, 4)
FactoryGirl.build_list(association.singularize.to_sym, 4)
association
c
n
association
c
association
exit
obj
send_message(obj, "#{association}=", FactoryGirl.build_list(associatio‡Pym, 4)
c
n
association
associate
exit
obj.places.count
obj.places
obj.places= FactoryGirl.build_list(association.singularize.to_sym, 4)
obj
assos
send_message(obj, "#{association}=", FactoryGirl.build_list(association.singularize.to_sym, 4))
obj
assos_obj
exit
assos_obj
c
exit
self
associate
associate.save
n
association
method_name
c
self
c
n
method_name
exit
cat.places.count
cat.places= FactoryGirl.build(:place)
cat.places.count
cat.places
cat.places= FactoryGirl.build(:place)
cat.places.to_a
cat = FactoryGirl.create(:category,:with_place)
cat
cat = FactoryGirl.create(object, create_association_param(association))
obj.places.count
exit
cat = FactoryGirl.create(object, create_association_param(association))
obj.places.count
obj
c
Place.where(category_id: 2).count
Place.where(category_id: 3).count
cat.places.count
cat.places=(FactoryGirl.build_list(:place, 4))
FactoryGirl.build_list(:place, 4)
cat = FactoryGirl.create(object, create_association_param(association))
n
exit
FactoryGirl.build_list(:place, 4)
(FactoryGirl.build_list(:place, 4)
cat.places=(FactoryGirl.build_list(:place, 4))
cat = FactoryGirl.create(object, create_association_param(association))
obj
exit
cls
exit
Place.all
Place.where(category_id: 3).count
cat.places.count
cat.places=(FactoryGirl.build_list(:place, 4))
cat.places=(FactoryGirl.build_list(:place))
cat.places=(FactoryGirl.build(:place))
cat = FactoryGirl.create(object, create_association_param(association))
FactoryGirl.create(object, create_association_param(association))
c
obj
exit
Place.where(category_id: 3).count
Place.where(category_id: 3).first
Place.where(category_id: 3).all
Place.where(category_id: 3)
Place.find(category_id: 3)
cat.id
cat.places.count
cat.places= FactoryGirl.build_list(:place, 3)
cat.places.count
cat.places = FactoryGirl.build_list(:place, 3)
cat.places << FactoryGirl.build_list(:place, 3)
cat.places.count
cat.places << FactoryGirl.build_list(:place, 3)
cat = FactoryGirl.create(object, create_association_param(association))
FactoryGirl.create(object, create_association_param(association))
obj
exit
cls
obj.places.count << FactoryGirl.build_list(:place, 4)
obj.places.count << FactoryGirl.build_list :place, 4
obj.places.count
FactoryGirl.create(object, create_association_param(association))
